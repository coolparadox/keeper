createdb -U postgres keeper
psql -U postgres keeper

CREATE TABLE mimes(id SERIAL PRIMARY KEY, mime text NOT NULL UNIQUE);
CREATE TABLE blobs(id SERIAL PRIMARY KEY, mime integer REFERENCES mimes(id), modified date NOT NULL, size integer NOT NULL, filename text);
CREATE TABLE chunks(id SERIAL PRIMARY KEY, chunk text NOT NULL UNIQUE);
CREATE TABLE blobs_chunks(blob integer REFERENCES blobs(id), chunk integer REFERENCES chunks(id), seq integer NOT NULL, PRIMARY KEY(blob, chunk, seq));
CREATE TABLE tags(id SERIAL PRIMARY KEY, tag text NOT NULL UNIQUE, CONSTRAINT tag_asciii CHECK(tag ~ '^[[:ascii:]]+$'), CONSTRAINT tag_nonblank CHECK(tag ~ '^[^[:space:]]+$'));
CREATE TABLE blobs_tags(blob integer REFERENCES blobs(id), tag integer REFERENCES tags(id), PRIMARY KEY(blob, tag));

BEGIN;
INSERT INTO mimes(mime) VALUES('application/pdf') ON CONFLICT(mime) DO NOTHING;
INSERT INTO blobs(mime,modified,size,filename) SELECT m.id,'2023-06-08',252073,'lorandi.mm' FROM mimes m WHERE m.mime='application/pdf';
CREATE TEMPORARY SEQUENCE blobs_chunks_seq_seq AS integer;
INSERT INTO chunks(chunk) VALUES('SGVsbG8gd29ybGQhCg==') ON CONFLICT(chunk) DO NOTHING;
INSERT INTO blobs_chunks(blob,chunk,seq) SELECT b.last_value, c.id, nextval('blobs_chunks_seq_seq') FROM blobs_id_seq b, chunks c WHERE c.chunk='SGVsbG8gd29ybGQhCg==';
INSERT INTO chunks(chunk) VALUES('SGkgdGhlcmUuLi4K') ON CONFLICT(chunk) DO NOTHING;
INSERT INTO blobs_chunks(blob,chunk,seq) SELECT b.last_value, c.id, nextval('blobs_chunks_seq_seq') FROM blobs_id_seq b, chunks c WHERE c.chunk='SGkgdGhlcmUuLi4K';
DROP SEQUENCE blobs_chunks_seq_seq;
INSERT INTO tags(tag) VALUES('jasper') ON CONFLICT(tag) DO NOTHING;
INSERT INTO blobs_tags(blob,tag) SELECT b.last_value, t.id FROM blobs_id_seq b, tags t WHERE t.tag='jasper' ON CONFLICT(blob,tag) DO NOTHING;
INSERT INTO blobs_tags(blob,tag) SELECT b.last_value, t.id FROM blobs_id_seq b, tags t WHERE t.tag='rehab' ON CONFLICT(blob,tag) DO NOTHING;
COMMIT;

====

create blob from <file> [with tags <tag1> <tag2> <tag3>]
[un]tag blob <id> with <tag1> <tag2> <tag3>
list blobs
list tags
describe blob <id>
describe tag <tag>
drop blob <id>

====

help [<command>]

acquire <mimetype> [stuff]
describe [stuff] <id>
forget [stuff] <id>

[un]label [stuff] <id> [<label>...]
describe label <label>

list [stuff|labels]

====

acquire
recover <ID>
forget <ID>
set <ID> mime <MIME>
set <ID> extension <EXTENSION>
list [mimes|extension|labels]
describe <ID>
[un]label <ID> <LABEL1> [<LABEL2> ...]
describe mime|ext|label <LABEL>

====

